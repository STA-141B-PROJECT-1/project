install.packages('rvest')
library(tidyverse)
library(tidyverse)
library(rvest)
nba <-read_html("https://stats.nba.com/players/traditional/?Season=2019-20&SeasonType=Regular%20Season&sort=PTS&dir=-1") #top 50 highest scoring players 2019-2020 nba season
nba
td_nodes <-nba %>% html_nodes("td")
td_nodes
nba <-read_html("https://stats.nba.com/players/traditional/?sort=PTS&dir=-1") #top 50 highest scoring players 2019-2020 nba season
td_nodes <-nba %>% html_nodes("td")
td_nodes
player <-  nba %>% html_nodes("td.player")
player
install.packages('ballr')
nba <-read_html("https://stats.nba.com/players/traditional/?sort=PTS&dir=-1")
td_nodes <-nba %>% html_nodes("td")
player <-  nba %>% html_nodes("td.player")
player
nba <-read_html("https://stats.nba.com/players/traditional/?sort=PTS&dir=-1")
nba
html <- read_html("https://www.imdb.com/chart/top/?ref_=nv_mv_250")
# it finds all the <td> nodes, but we only need the node with class `titleColumn`
td_nodes <- html %>% html_nodes("td")
td_nodes
nba <-read_html("https://stats.nba.com/players/traditional/?sort=PTS&dir=-1")
td_nodes <-nba %>% html_nodes("td")
td_nodes <-nba %>% html_nodes("table")
td_nodes
td_nodes <-nba %>% html_nodes("tbdy")
td_nodes <-nba %>% html_nodes("tbody")
td_nodes
td_nodes <-nba %>% html_nodes("head")
td_nodes
td_nodes <-nba %>% html_nodes("div")
td_nodes
td_nodes <-nba %>% html_nodes("a")
td_nodes
td_nodes <-nba %>% html_nodes("t")
td_nodes <-nba %>% html_nodes("td")
td_nodes <-nba %>% html_nodes("a")
td_nodes
usethis::edit_r_environ("project")
td_nodes <-nba %>% html_nodes("div")
td_nodes
td_nodes <-nba %>% html_nodes("div") %>% html_nodes("div.table_outer_container")
td_nodes
td_nodes <-nba %>% html_nodes("td")
td_nodes
td_nodes <-nba %>% html_nodes("a")
td_nodes
nba <-read_html("https://stats.nba.com/players/traditional/?sort=PTS&dir=-1")
nba
nba
https://stats.nba.com/players/traditional/?sort=PTS&dir=-1
td_nodes <-nba %>% html_nodes("table")
td_nodes
player <-  nba %>% html_nodes("td.player") %>% html_nodes()
nba_table <- html_table(nba)
nba_table
data.frame(nba_table)
nba <-read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html")
nba
nba_table <- html_table(nba)
nba_table
data.frame(nba_table)
player_stats <- data.frame(nba_table)
playerstats
player_stats
player_stats %>% group_by("Rk")
player_stats %>% group_by("Tm") %>%
player_stats %>% group_by("Tm")
player_stats <- data.frame(nba_table)
player_stats %>% group_by("Tm")
player_stats %>% group_by("Tm")
player_stats %>% group_by("Age")
player_stats %>% group_by(Tm)
player_stats %>% group_by(Age)
player_stats %>% mutate_at(vars(Rk,Age,Tm,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),as.numeric())
player_stats %>% mutate_at(vars(Rk,Age,Tm,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),as.numeric())
player_stats %>% mutate_all(vars(Rk,Age,Tm,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),as.numeric())
player_stats %>% mutate_all(vars(Rk,Age),as.numeric())
player_stats %>% mutate_at(vars(Rk,Age),as.numeric())
player_stats %>% mutate_at(vars(Rk),as.numeric())
player_stats %>% mutate_at(vars(Rk,Age,Tm,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric))
player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric))
player_stats <- player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric)) %>% drop_na
player_stats <- player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric)) %>% drop_na
player_stats
player_stats %>%  group_by(Age)
player_stats %>%  group_by(Age)
a <- player_stats %>%  group_by(Age)
a
a <- player_stats %>%  arrange(Age)
a
library(tidyverse)
library(rvest)
usethis::edit_r_environ("project")
library(jsonlite)
check_key()
key = Sys.getenv("nba_key"
key = Sys.getenv("nba_key")
key = Sys.getenv("nba_key")
key
key = Sys.getenv("nba_key")
key
key = Sys.getenv("nba_key")
key
install.packages("nbastatR")
devtools::install_github("abresler/nbastatR")
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(tidyverse)
library(tidyverse)
library(rvest)
install.packages("purrr")
install.packages("purrr")
library("purrr")
install.packages("purrr")
install.packages("purrr")
library(tidyverse)
library(rvest)
usethis::edit_r_environ("project")
library("purrr")
devtools::install_github("abresler/nbastatR")
z<-c("curl" , "data.table" , "data.tree" , "dplyr" , "formattable" , "ggplot2" , "gmum.r" , "hexbin" , "httr" , "jsonlite" , "kohonen" , "lubridate" , "magrittr" , "networkD3" , "purrr" , "readr" , "stringr" , "tidyjson" , "tidyr" , "visNetwork")
install.packages(z)
install.packages(z)
install.packages(z)
library(z)
z<-c("curl" , "data.table" , "data.tree" , "dplyr" , "formattable" , "ggplot2" , "gmum.r" , "hexbin" , "httr" , "jsonlite" , "kohonen" , "lubridate" , "magrittr" , "networkD3" , "purrr" , "readr" , "stringr" , "tidyjson" , "tidyr" , "visNetwork")
library(z)
library("curl" , "data.table" , "data.tree" , "dplyr" , "formattable" , "ggplot2" , "gmum.r" , "hexbin" , "httr" , "jsonlite" , "kohonen" , "lubridate" , "magrittr" , "networkD3" , "purrr" , "readr" , "stringr" , "tidyjson" , "tidyr" , "visNetwork")
libraries(z)
devtools::install_github("jakesherman/packages")
library(devtools)
devtools::install_github("jakesherman/packages")
devtools::install_github("abresler/nbastatR")
library(tidyverse)
library(tidyverse)
install.packages('dplyr')
library(tidyverse)
install.packages(c("anytime", "backports", "bit", "broom", "ca", "callr", "car", "digest", "evaluate", "fansi", "foreach", "forecast", "fracdiff", "gh", "glue", "gnm", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "ISwR", "knitr", "later", "lme4", "maptools", "markdown", "modelr", "openxlsx", "plotly", "plyr", "prettyunits", "processx", "progress", "promises", "ps", "quadprog", "quantreg", "qvcalc", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "RJSONIO", "rmarkdown", "rsconnect", "rstudioapi", "rticles", "scales", "shiny", "sp", "SparseM", "stringi", "tidyselect", "tidyverse", "tinytex", "tsibble", "TSstudio", "TTR", "vcd", "vctrs", "whisker", "xfun", "xts", "yaml", "zip", "zoo"))
install.packages(c("anytime", "backports", "bit", "broom", "ca", "callr", "car", "digest", "evaluate", "fansi", "foreach", "forecast", "fracdiff", "gh", "glue", "gnm", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "ISwR", "knitr", "later", "lme4", "maptools", "markdown", "modelr", "openxlsx", "plotly", "plyr", "prettyunits", "processx", "progress", "promises", "ps", "quadprog", "quantreg", "qvcalc", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "RJSONIO", "rmarkdown", "rsconnect", "rstudioapi", "rticles", "scales", "shiny", "sp", "SparseM", "stringi", "tidyselect", "tidyverse", "tinytex", "tsibble", "TSstudio", "TTR", "vcd", "vctrs", "whisker", "xfun", "xts", "yaml", "zip", "zoo"))
install.packages(c("anytime", "backports", "bit", "broom", "ca", "callr", "car", "digest", "evaluate", "fansi", "foreach", "forecast", "fracdiff", "gh", "glue", "gnm", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "ISwR", "knitr", "later", "lme4", "maptools", "markdown", "modelr", "openxlsx", "plotly", "plyr", "prettyunits", "processx", "progress", "promises", "ps", "quadprog", "quantreg", "qvcalc", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "RJSONIO", "rmarkdown", "rsconnect", "rstudioapi", "rticles", "scales", "shiny", "sp", "SparseM", "stringi", "tidyselect", "tidyverse", "tinytex", "tsibble", "TSstudio", "TTR", "vcd", "vctrs", "whisker", "xfun", "xts", "yaml", "zip", "zoo"))
library("data.table", lib.loc="~/R/win-library/3.5")
install.packages(c("anytime", "backports", "bit", "broom", "ca", "callr", "car", "digest", "evaluate", "fansi", "foreach", "forecast", "fracdiff", "gh", "glue", "gnm", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "ISwR", "knitr", "later", "lme4", "maptools", "markdown", "modelr", "openxlsx", "plotly", "plyr", "prettyunits", "processx", "progress", "promises", "ps", "quadprog", "quantreg", "qvcalc", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "RJSONIO", "rmarkdown", "rsconnect", "rstudioapi", "rticles", "scales", "shiny", "sp", "SparseM", "stringi", "tidyselect", "tidyverse", "tinytex", "tsibble", "TSstudio", "TTR", "vcd", "vctrs", "whisker", "xfun", "xts", "yaml", "zip", "zoo"))
install.packages(c("anytime", "backports", "bit", "broom", "ca", "callr", "car", "digest", "evaluate", "fansi", "foreach", "forecast", "fracdiff", "gh", "glue", "gnm", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "ISwR", "knitr", "later", "lme4", "maptools", "markdown", "modelr", "openxlsx", "plotly", "plyr", "prettyunits", "processx", "progress", "promises", "ps", "quadprog", "quantreg", "qvcalc", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "RJSONIO", "rmarkdown", "rsconnect", "rstudioapi", "rticles", "scales", "shiny", "sp", "SparseM", "stringi", "tidyselect", "tidyverse", "tinytex", "tsibble", "TSstudio", "TTR", "vcd", "vctrs", "whisker", "xfun", "xts", "yaml", "zip", "zoo"))
library(tidyverse)
library(rvest)
library(devtools)
nba <-read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html")
nba
nba_table <- html_table(nba)
nba_table
player_stats <- data.frame(nba_table)
player_stats <- player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric)) %>% drop_na
a <- player_stats %>%  arrange(Age) %>%  group_by(Player)
a
a <- player_stats %>%  arrange(Age) %>%  group_by(Rk)
nba <-read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html")
nba
nba_table <- html_table(nba)
nba_table
player_stats <- data.frame(nba_table)
player_stats <- player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric)) %>% drop_na
a <- player_stats %>%  arrange(Age) %>%  group_by(Rk)
a
a <- player_stats %>%  arrange(Rk) %>%  group_by(Rk)
a <- player_stats %>%  arrange(Rk) %>%  group_by(Rk)
a
a <- player_stats %>%  group_by(Rk)
nba <-read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html")
nba_table <- html_table(nba)
player_stats <- data.frame(nba_table)
player_stats <- player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric)) %>% drop_na
a <- player_stats %>%  group_by(Rk)
a
a <- player_stats %>%  group_by(n_distinct(Rk))
a
a <- player_stats %>%  group_by(Rk)
a
a <- player_stats %>%  group_by(Player)
a
a <- player_stats %>%  group_by(Tm)
a
a <- player_stats %>%  group_by(PTS)
a
a <- player_stats %>%  group_by(PTS) %>% arrange(PTS)
a
a <- player_stats %>%  group_by(PTS) %>% arrange(desc(PTS))
a
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}")
library(jsonlite)
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}")
install.packages('httr')
install.packages('httr')
install.packages("httr")
library(tidyverse)
library(rvest)
library(devtools)
usethis::edit_r_environ("project")
library(httr)
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}")
nbaApi
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}"),
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}",
query = list(key = Sys.getenv("nba_key")))
nbaApi
stop_for_status(nbaApi)
nba_key
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}",
query = list(key = Sys.getenv("nba_key")))
nbaApi <- GET("api-nba-v1.p.rapidapi.com",
query = list(key = Sys.getenv("nba_key")))
library(jsonlite)
library(httr)
nbaApi <- GET("api-nba-v1.p.rapidapi.com",
query = list(key = Sys.getenv("nba_key")))
nba_key
nbaApi <- GET("api-nba-v1.p.rapidapi.com",
query = list(key = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436")))
library(tidyverse)
nbaApi <- GET("api-nba-v1.p.rapidapi.com",
query = list(key = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436")))
r <- GET(
"api-nba-v1.p.rapidapi.com",
query = list(
`api-key` = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"),
q = text,
page = page
)
)
r <- GET(
"api-nba-v1.p.rapidapi.com",
query = list(
`api-key` = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"),
q = text,
page = page
)
r <- GET(
r <- GET(
"api-nba-v1.p.rapidapi.com",
query = list(
`api-key` = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436")
)
)
r <- GET("api-nba-v1.p.rapidapi.com")
library(httr)
r <- GET("api-nba-v1.p.rapidapi.com")
r <- GET("api-nba-v1.p.rapidapi.com")
r <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}")
r
https_status(r)
http_status(r)
r <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}",
query = list(key ="f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"))
r
http_status(r)
r <- GET("api-nba-v1.p.rapidapi.com",
query = list(key ="f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"))
r <- GET(" https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}",
query = list(key ="f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"))
r <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}",
query = list(key ="f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"))
http_status(r)
r$content
r$headers
r$all_headers
r$request
stop_for_status(r)
json <- content(r, as = "text", encoding = "UTF-8")
fromJSON(json)$response
stop_for_status(r)
json <- content(r, as = "text", encoding = "UTF-8")
fromJSON(json)$response
http_status(r)
r <- GET("stats.nba.com/stats/scoreboard/?GameDate=02/14/2015&LeagueID=00&DayOffset=0")
devtools::install_github("abresler/nbastatR")
library("nbastatR")
all_nba_teams()
get_day_nba_game_scores(date = "10/06/15")
get_day_nba_games
get_day_nba_games("02/11/2016")
library("nbastatR")
library("nbastatR")
nba <-read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html")
library(rvest)
nba <-read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html")
nba_table <- html_table(nba)
player_stats <- data.frame(nba_table)
player_stats <- player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric)) %>% drop_na
a <- player_stats %>%  group_by(PTS) %>% arrange(desc(PTS))
a
library(tidyverse)
library(rvest)
library(devtools)
usethis::edit_r_environ("project")
nba <-read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html")
nba_table <- html_table(nba)
player_stats <- data.frame(nba_table)
player_stats <- player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric)) %>% drop_na
a <- player_stats %>%  group_by(PTS) %>% arrange(desc(PTS))
a
library(jsonlite)
library(httr)
nbaApi <- GET("api-nba-v1.p.rapidapi.com",
query = list(key = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"),
se))
library(tidyverse)
library(jsonlite)
install.packages('ballr')
install.packages('yaml')
library("nbastatR")
get_nba
get_day_nba_games("02/11/2016")
library("ballr")
NBAPerGameStatistics(season = 2020)
r <- GET("https://stats.nba.com/player/201935/")
http_status(r)
r <- GET("stats.nba.com/stats/scoreboard/?GameDate=02/14/2015&LeagueID=00&DayOffset=0")
https://stats.nba.com/player/201935/
http_status(r)
http_status(r)
r <- GET("https://stats.nba.com/player/201935/"),
r <- GET("https://stats.nba.com/player/201935/")
http_status(r)
r$content
stop_for_status(r)
stop_for_status(r)
json <- content(r, as = "text", encoding = "UTF-8")
fromJSON(json, flatten = TRUE)$results %>% pull(vicinity)
json
fromJSON(json, flatten = TRUE)
json
fromJSON(json)$response
