nba_table <- html_table(nba)
player_stats <- data.frame(nba_table)
player_stats <- player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric)) %>% drop_na
a <- player_stats %>%  group_by(Rk)
a
a <- player_stats %>%  group_by(n_distinct(Rk))
a
a <- player_stats %>%  group_by(Rk)
a
a <- player_stats %>%  group_by(Player)
a
a <- player_stats %>%  group_by(Tm)
a
a <- player_stats %>%  group_by(PTS)
a
a <- player_stats %>%  group_by(PTS) %>% arrange(PTS)
a
a <- player_stats %>%  group_by(PTS) %>% arrange(desc(PTS))
a
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}")
library(jsonlite)
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}")
install.packages('httr')
install.packages('httr')
install.packages("httr")
library(tidyverse)
library(rvest)
library(devtools)
usethis::edit_r_environ("project")
library(httr)
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}")
nbaApi
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}"),
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}",
query = list(key = Sys.getenv("nba_key")))
nbaApi
stop_for_status(nbaApi)
nba_key
nbaApi <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}",
query = list(key = Sys.getenv("nba_key")))
nbaApi <- GET("api-nba-v1.p.rapidapi.com",
query = list(key = Sys.getenv("nba_key")))
library(jsonlite)
library(httr)
nbaApi <- GET("api-nba-v1.p.rapidapi.com",
query = list(key = Sys.getenv("nba_key")))
nba_key
nbaApi <- GET("api-nba-v1.p.rapidapi.com",
query = list(key = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436")))
library(tidyverse)
nbaApi <- GET("api-nba-v1.p.rapidapi.com",
query = list(key = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436")))
r <- GET(
"api-nba-v1.p.rapidapi.com",
query = list(
`api-key` = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"),
q = text,
page = page
)
)
r <- GET(
"api-nba-v1.p.rapidapi.com",
query = list(
`api-key` = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"),
q = text,
page = page
)
r <- GET(
r <- GET(
"api-nba-v1.p.rapidapi.com",
query = list(
`api-key` = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436")
)
)
r <- GET("api-nba-v1.p.rapidapi.com")
library(httr)
r <- GET("api-nba-v1.p.rapidapi.com")
r <- GET("api-nba-v1.p.rapidapi.com")
r <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}")
r
https_status(r)
http_status(r)
r <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}",
query = list(key ="f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"))
r
http_status(r)
r <- GET("api-nba-v1.p.rapidapi.com",
query = list(key ="f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"))
r <- GET(" https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}",
query = list(key ="f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"))
r <- GET("https://api-nba-v1.p.rapidapi.com/statistics/players/playerId/{playerid}",
query = list(key ="f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"))
http_status(r)
r$content
r$headers
r$all_headers
r$request
stop_for_status(r)
json <- content(r, as = "text", encoding = "UTF-8")
fromJSON(json)$response
stop_for_status(r)
json <- content(r, as = "text", encoding = "UTF-8")
fromJSON(json)$response
http_status(r)
r <- GET("stats.nba.com/stats/scoreboard/?GameDate=02/14/2015&LeagueID=00&DayOffset=0")
devtools::install_github("abresler/nbastatR")
library("nbastatR")
all_nba_teams()
get_day_nba_game_scores(date = "10/06/15")
get_day_nba_games
get_day_nba_games("02/11/2016")
library("nbastatR")
library("nbastatR")
nba <-read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html")
library(rvest)
nba <-read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html")
nba_table <- html_table(nba)
player_stats <- data.frame(nba_table)
player_stats <- player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric)) %>% drop_na
a <- player_stats %>%  group_by(PTS) %>% arrange(desc(PTS))
a
library(tidyverse)
library(rvest)
library(devtools)
usethis::edit_r_environ("project")
nba <-read_html("https://www.basketball-reference.com/leagues/NBA_2020_per_game.html")
nba_table <- html_table(nba)
player_stats <- data.frame(nba_table)
player_stats <- player_stats %>% mutate_at(vars(Rk,Age,G,GS,MP,FG,FGA,FG.,X3P,X3PA,X3P.,X2P,eFG.,FT,FTA,FT.,ORB,DRB,TRB,AST,STL,BLK,TOV,PF,PTS),funs(as.numeric)) %>% drop_na
a <- player_stats %>%  group_by(PTS) %>% arrange(desc(PTS))
a
library(jsonlite)
library(httr)
nbaApi <- GET("api-nba-v1.p.rapidapi.com",
query = list(key = Sys.getenv("f0f72cf4a1mshda9d0bc5d47fd6dp13c50cjsn5d6698b12436"),
se))
library(tidyverse)
library(jsonlite)
install.packages('ballr')
install.packages('yaml')
library("nbastatR")
get_nba
get_day_nba_games("02/11/2016")
library("ballr")
NBAPerGameStatistics(season = 2020)
r <- GET("https://stats.nba.com/player/201935/")
http_status(r)
r <- GET("stats.nba.com/stats/scoreboard/?GameDate=02/14/2015&LeagueID=00&DayOffset=0")
https://stats.nba.com/player/201935/
http_status(r)
http_status(r)
r <- GET("https://stats.nba.com/player/201935/"),
r <- GET("https://stats.nba.com/player/201935/")
http_status(r)
r$content
stop_for_status(r)
stop_for_status(r)
json <- content(r, as = "text", encoding = "UTF-8")
fromJSON(json, flatten = TRUE)$results %>% pull(vicinity)
json
fromJSON(json, flatten = TRUE)
json
fromJSON(json)$response
library(tidyverse)
library(tidyverse)
library(rvest)
NBAPerGameStatistics(season = 2020)
library("ballr")
NBAPerGameStatistics(season = 2020)
playerdata <- NBAPerGameStatistics(season = 2020)
library("ballr")
playerdata <- NBAPerGameStatistics(season = 2020)
playerdata
# Used packages
pacotes = c("shiny", "shinydashboard", "shinythemes", "plotly", "shinycssloaders","tidyverse",
"scales", "knitr", "kableExtra", "ggfortify","dplyr","plotly","FNN")
# Run the following command to verify that the required packages are installed. If some package
# is missing, it will be installed automatically
package.check <- lapply(pacotes, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
}
})
data <- read.table("PES2019.txt",header=TRUE,sep="\t")
names(data)[1] <- "player"  #rename from "?..player" to "player"
data.frame(data)
data
data
data %>%
select(1,4,5,6,7,10,39,26,34,24,25,12,13,14,15,16,23,17,
18,19,20,28,27,22,21,29,30,31,32,33) %>%
filter(data$player == gsub("[[:space:]]*$","",gsub("- .*",'',input$player)))
library(tidyverse)
data %>%
select(1,4,5,6,7,10,39,26,34,24,25,12,13,14,15,16,23,17,
18,19,20,28,27,22,21,29,30,31,32,33) %>%
filter(data$player == gsub("[[:space:]]*$","",gsub("- .*",'',input$player)))
data %>%
select(1,4,5,6,7,10,39,26,34,24,25,12,13,14,15,16,23,17,
18,19,20,28,27,22,21,29,30,31,32,33)
data
data %>%
select(1,4,5,6,7,10,39,26,34,24,25,12,13,14,15,16,23,17,
18,19,20,28,27,22,21,29,30,31,32,33)
playerdata
library(tidyverse)
library(rvest)
library(devtools)
usethis::edit_r_environ("project")
playerdata %>% select(2)
names(playerdata)
playerdata %>% select(2,8,24,25,26,27,28,29,30)
playerdata %>% select(player,mp,trb,ast,stl,blk,tov,pf,pts)
data %>%
filter(data$player != gsub("[[:space:]]*$"))
data %>%
filter(player != gsub("[[:space:]]*$"))
data %>%
filter(player != gsub("[[:space:]]*$","",gsub("- .*",'',player)))
data
data %>% filter(55 == number)
gsub("- .*",'',data$player)
gsub("[[:space:]]*$"
gsub("[[:space:]]*$"
gsub("[[:space:]]*$")
gsub("[[:space:]]*$",data$player)
data %>%
filter(player != gsub("[[:space:]]*$","",gsub("- .*",'',player)))
playerdata %>% select(player,pos,mp,trb,ast,stl,blk,tov,pf,pts)
ui <- navbarPage("NBA 2019-2020 Player Radar Plot",
tabPanel("Graphic",fluidPage(theme = shinythemes::shinytheme("cerulean")),
tags$head(
tags$style(HTML(".shiny-output-error-validation{color: red;}"))),
pageWithSidebar(
headerPanel('Apply filters'),
sidebarPanel(width = 4,
selectInput('player', 'Choose a player:',paste(playerdata$player,"-",playerdata$tm)),
checkboxGroupInput(inputId = "position",
label = 'Position:', choices = c("PG" = "PG", "SG" = "SG",
"SF"="SF","PF"="PF","C"="C",
"SF-SG"="SF-SG","C-PF"="C-PF","PF-SF"= "PF-SF","SF-PF" = "SF-PF"),
selected = c("SG"="SG"),inline=TRUE),
submitButton("Update filters")
),
mainPanel(
column(8, plotlyOutput("plot1", width = 800, height=700),
p("Here's is radar plot of the stats of the selected NBA Player",
style = "font-size:25px")
)
)
)),
tabPanel("Info",p("We used a data set consisting of game statistics from 511 NBA players from basketball-reference.com. The data set
was obtained from ", a("basketball reference", href="https://www.basketball-reference.com/leagues/NBA_2020_totals.html", target="_blank"),
"website using API package called ballr. This app is an interactive tool that allows any user to choose a player from the NBA and check their stats."),
hr(),
p("The available player positions are:",style = "font-size:25px"),
p("PG: Point Guard",style = "font-size:15px;color: blue"),
p("SG: Shooting Guard",style = "font-size:15px;color: blue"),
p("SF: Small Forward",style = "font-size:15px;color: blue"),
p("PF: Power Forward",style = "font-size:15px;color: blue"),
p("C: Center",style = "font-size:15px;color: blue"),
p("SF-SG: Small Forward and Shooting Guard",style = "font-size:15px;color: blue"),
p("C-PF: Center and Power Forward",style = "font-size:15px;color: blue"),
p("PF-SF: Power Forward and Small Forward",style = "font-size:15px;color: blue"),
hr(),
p("The abbreviations used in the radar chart are:",style = "font-size:25px"),
p("PPG: Points Per Game",style = "font-size:15px;color: blue"),
p("RPG: Rebounds Per Game",style = "font-size:15px;color: blue"),
p("AST: Assist Per Game",style = "font-size:15px;color: blue"),
p("MPG: Minutes Played Per Game",style = "font-size:15px;color: blue"),
p("TOV: Turnovers Per Game",style = "font-size:15px;color: blue"),
p("PF: Personal Fouls Per Game",style = "font-size:15px;color: blue"),
p("BLK: Blocks Per Game",style = "font-size:15px;color: blue"),
p("STL: Steals Per Game",style = "font-size:15px;color: blue")),
tabPanel("Developers",
p("John Tran",style = "font-size:25px")
)
)
playerdata[1,]
shiny::runApp()
selectedData1 <- reactive({
playerdata %>%
filter(playerdata$player != gsub("[[:space:]]*$","",gsub("- .*",'',input$player)))
})
selectedData1() %>%
select(player,pos,mp,trb,ast,stl,blk,tov,pf,pts) %>%
filter(selectedData1$pos %in% input$pos)
selectedData1() %>%
select(player,pos,mp,trb,ast,stl,blk,tov,pf,pts) %>%
filter(selectedData1()$pos %in% input$pos)
runApp()
runApp()
selectedData5 <- reactive({
selectedData4 %>%
select(mp,trb,ast,stl,blk,tov,pf,pts)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fig
library(plotly)
fig <- plot_ly(
type = 'scatterpolar',
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
fill = 'toself'
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
),
showlegend = F
)
fig
library(plotly)
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself'
)
fig <- fig %>%
add_trace(
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group A'
)
fig <- fig %>%
add_trace(
r = c(1.5, 10, 39, 31, 15, 1.5),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group B'
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
)
)
fig
library(plotly)
fig <- plot_ly(
type = 'scatterpolar',
mode = 'closest',
fill = 'toself'
)
fig <- fig %>%
add_trace(
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group A'
)
fig <- fig %>%
add_trace(
r = c(1.5, 10, 39, 31, 15, 1.5),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group B'
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
)
)
fig
fig
fig <- plot_ly(
type = 'scatterpolar',
mode = 'marker',
fill = 'toself'
)
library(plotly)
fig <- plot_ly(
type = 'scatterpolar',
mode = 'marker',
fill = 'toself'
)
fig <- fig %>%
add_trace(
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group A'
)
fig <- fig %>%
add_trace(
r = c(1.5, 10, 39, 31, 15, 1.5),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group B'
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
)
)
fig
fig <- plot_ly(
type = 'scatterpolar',
mode = 'none',
fill = 'toself'
)
library(plotly)
fig <- plot_ly(
type = 'scatterpolar',
mode = 'none',
fill = 'toself'
)
fig <- fig %>%
add_trace(
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group A'
)
fig <- fig %>%
add_trace(
r = c(1.5, 10, 39, 31, 15, 1.5),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group B'
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
)
)
fig
library(plotly)
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself'
)
fig <- fig %>%
add_trace(
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group A'
)
fig <- fig %>%
add_trace(
r = c(1.5, 10, 39, 31, 15, 1.5),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group B'
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
)
)
fig
library(plotly)
fig <- plot_ly(
type = 'scatterpolar',
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
fill = 'toself'
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
),
showlegend = F
)
fig
devtools::install_github("ropensci/plotly")
install.packages('plotly')
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
fig <- plot_ly(
type = 'scatterpolar',
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
fill = 'toself'
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
),
showlegend = F
)
fig
